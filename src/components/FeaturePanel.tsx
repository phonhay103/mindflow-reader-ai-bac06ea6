
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { FileText, Map, HelpCircle, Clock, Sparkles, Network } from 'lucide-react';
import { KnowledgeGraph } from './KnowledgeGraph';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface FeaturePanelProps {
  extractedText: string;
  activeFeature: string;
  onFeatureSelect: (feature: string) => void;
  fileName: string;
}

export const FeaturePanel: React.FC<FeaturePanelProps> = ({
  extractedText,
  activeFeature,
  onFeatureSelect,
  fileName
}) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<Record<string, any>>({});
  const { toast } = useToast();

  const analyzeContent = async (feature: string) => {
    setIsAnalyzing(true);
    onFeatureSelect(feature);
    
    if (feature === 'knowledge-graph') {
      try {
        console.log('Calling knowledge graph API...');
        const { data, error } = await supabase.functions.invoke('generate-knowledge-graph', {
          body: { text: extractedText }
        });

        if (error) {
          console.error('Supabase function error:', error);
          throw error;
        }

        console.log('Knowledge graph response:', data);
        
        setAnalysisResults(prev => ({
          ...prev,
          'knowledge-graph': {
            title: "Knowledge Graph",
            content: data.knowledgeGraph
          }
        }));

        toast({
          title: "Knowledge Graph t·∫°o th√†nh c√¥ng!",
          description: "S∆° ƒë·ªì tri th·ª©c ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª´ n·ªôi dung vƒÉn b·∫£n.",
        });
      } catch (error) {
        console.error('Error generating knowledge graph:', error);
        toast({
          title: "L·ªói t·∫°o Knowledge Graph",
          description: "Kh√¥ng th·ªÉ t·∫°o s∆° ƒë·ªì tri th·ª©c. Vui l√≤ng th·ª≠ l·∫°i.",
          variant: "destructive",
        });
      } finally {
        setIsAnalyzing(false);
      }
      return;
    }
    
    // Simulate AI analysis for other features
    setTimeout(() => {
      const mockResults = {
        summary: {
          title: "T√≥m t·∫Øt n·ªôi dung",
          content: `Cu·ªën s√°ch "${fileName}" t·∫≠p trung v√†o ch·ªß ƒë·ªÅ tr√≠ tu·ªá nh√¢n t·∫°o v√† machine learning. N·ªôi dung ch√≠nh bao g·ªìm:
          
‚Ä¢ Gi·ªõi thi·ªáu v·ªÅ AI v√† c√°c kh√°i ni·ªám c∆° b·∫£n
‚Ä¢ C√°c thu·∫≠t to√°n machine learning ph·ªï bi·∫øn  
‚Ä¢ ·ª®ng d·ª•ng th·ª±c t·∫ø c·ªßa AI trong cu·ªôc s·ªëng
‚Ä¢ H∆∞·ªõng d·∫´n tri·ªÉn khai c√°c m√¥ h√¨nh AI
‚Ä¢ Xu h∆∞·ªõng ph√°t tri·ªÉn t∆∞∆°ng lai c·ªßa AI

Cu·ªën s√°ch ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu v√† c√≥ kinh nghi·ªám trong lƒ©nh v·ª±c c√¥ng ngh·ªá.`
        },
        mindmap: {
          title: "S∆° ƒë·ªì t∆∞ duy",
          content: `
üß† TR√çNH T·ª® NH√ÇN T·∫†O
‚îú‚îÄ‚îÄ üìö Ki·∫øn th·ª©c c∆° b·∫£n
‚îÇ   ‚îú‚îÄ‚îÄ Machine Learning
‚îÇ   ‚îú‚îÄ‚îÄ Deep Learning  
‚îÇ   ‚îî‚îÄ‚îÄ Neural Networks
‚îú‚îÄ‚îÄ üîß Thu·∫≠t to√°n
‚îÇ   ‚îú‚îÄ‚îÄ Supervised Learning
‚îÇ   ‚îú‚îÄ‚îÄ Unsupervised Learning
‚îÇ   ‚îî‚îÄ‚îÄ Reinforcement Learning
‚îú‚îÄ‚îÄ üí° ·ª®ng d·ª•ng
‚îÇ   ‚îú‚îÄ‚îÄ Computer Vision
‚îÇ   ‚îú‚îÄ‚îÄ Natural Language Processing
‚îÇ   ‚îî‚îÄ‚îÄ Robotics
‚îî‚îÄ‚îÄ üöÄ T∆∞∆°ng lai
    ‚îú‚îÄ‚îÄ AGI (Artificial General Intelligence)
    ‚îú‚îÄ‚îÄ Quantum Computing
    ‚îî‚îÄ‚îÄ AI Ethics`
        },
        faq: {
          title: "C√¢u h·ªèi th∆∞·ªùng g·∫∑p",
          content: [
            {
              question: "AI kh√°c g√¨ v·ªõi Machine Learning?",
              answer: "AI l√† kh√°i ni·ªám t·ªïng qu√°t v·ªÅ m√°y m√≥c c√≥ th·ªÉ th·ª±c hi·ªán c√°c t√°c v·ª• th√¥ng minh, c√≤n Machine Learning l√† m·ªôt nh√°nh con c·ªßa AI t·∫≠p trung v√†o vi·ªác h·ªçc t·ª´ d·ªØ li·ªáu."
            },
            {
              question: "L√†m th·∫ø n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc AI?",
              answer: "N√™n b·∫Øt ƒë·∫ßu v·ªõi to√°n h·ªçc c∆° b·∫£n (statistics, linear algebra), sau ƒë√≥ h·ªçc Python v√† c√°c th∆∞ vi·ªán nh∆∞ scikit-learn, TensorFlow."
            },
            {
              question: "AI c√≥ th·ªÉ thay th·∫ø con ng∆∞·ªùi kh√¥ng?",
              answer: "AI c√≥ th·ªÉ t·ª± ƒë·ªông h√≥a nhi·ªÅu c√¥ng vi·ªác nh∆∞ng c≈©ng t·∫°o ra c∆° h·ªôi vi·ªác l√†m m·ªõi. Quan tr·ªçng l√† con ng∆∞·ªùi c·∫ßn th√≠ch ·ª©ng v√† h·ªçc k·ªπ nƒÉng m·ªõi."
            }
          ]
        },
        timeline: {
          title: "D√≤ng th·ªùi gian",
          content: [
            { year: "1950", event: "Alan Turing ƒë·ªÅ xu·∫•t 'Turing Test'" },
            { year: "1956", event: "Thu·∫≠t ng·ªØ 'Artificial Intelligence' ƒë∆∞·ª£c ƒë·∫∑t ra" },
            { year: "1980s", event: "Expert Systems ph√°t tri·ªÉn m·∫°nh" },
            { year: "1997", event: "Deep Blue c·ªßa IBM th·∫Øng Gary Kasparov" },
            { year: "2006", event: "Geoffrey Hinton gi·ªõi thi·ªáu Deep Learning" },
            { year: "2012", event: "AlexNet c√°ch m·∫°ng h√≥a Computer Vision" },
            { year: "2016", event: "AlphaGo th·∫Øng Lee Sedol" },
            { year: "2020", event: "GPT-3 ra m·∫Øt v·ªõi 175 billion parameters" },
            { year: "2023", event: "ChatGPT v√† cu·ªôc c√°ch m·∫°ng AI generative" }
          ]
        }
      };
      
      setAnalysisResults(prev => ({
        ...prev,
        [feature]: mockResults[feature as keyof typeof mockResults]
      }));
      setIsAnalyzing(false);
    }, 2000);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Sparkles className="w-5 h-5 text-purple-600" />
            <span>Ph√¢n t√≠ch n·ªôi dung: {fileName}</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <Button
              variant={activeFeature === 'summary' ? 'default' : 'outline'}
              onClick={() => analyzeContent('summary')}
              className="flex flex-col items-center space-y-2 h-auto py-4"
            >
              <FileText className="w-6 h-6" />
              <span>T√≥m t·∫Øt</span>
            </Button>
            
            <Button
              variant={activeFeature === 'mindmap' ? 'default' : 'outline'}
              onClick={() => analyzeContent('mindmap')}
              className="flex flex-col items-center space-y-2 h-auto py-4"
            >
              <Map className="w-6 h-6" />
              <span>Mind Map</span>
            </Button>
            
            <Button
              variant={activeFeature === 'knowledge-graph' ? 'default' : 'outline'}
              onClick={() => analyzeContent('knowledge-graph')}
              className="flex flex-col items-center space-y-2 h-auto py-4"
            >
              <Network className="w-6 h-6" />
              <span>Knowledge Graph</span>
            </Button>
            
            <Button
              variant={activeFeature === 'faq' ? 'default' : 'outline'}
              onClick={() => analyzeContent('faq')}
              className="flex flex-col items-center space-y-2 h-auto py-4"
            >
              <HelpCircle className="w-6 h-6" />
              <span>FAQ</span>
            </Button>
            
            <Button
              variant={activeFeature === 'timeline' ? 'default' : 'outline'}
              onClick={() => analyzeContent('timeline')}
              className="flex flex-col items-center space-y-2 h-auto py-4"
            >
              <Clock className="w-6 h-6" />
              <span>Timeline</span>
            </Button>
          </div>
        </CardContent>
      </Card>

      {activeFeature && (
        <Card>
          <CardContent className="pt-6">
            {isAnalyzing ? (
              <div className="flex items-center justify-center py-12">
                <div className="text-center">
                  <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                  <p className="text-gray-600">
                    {activeFeature === 'knowledge-graph' 
                      ? 'ƒêang t·∫°o Knowledge Graph v·ªõi Google AI...' 
                      : 'ƒêang ph√¢n t√≠ch n·ªôi dung v·ªõi AI...'
                    }
                  </p>
                </div>
              </div>
            ) : analysisResults[activeFeature] ? (
              <div>
                <h3 className="text-xl font-semibold mb-4">
                  {analysisResults[activeFeature].title}
                </h3>
                
                {activeFeature === 'knowledge-graph' ? (
                  <KnowledgeGraph data={analysisResults[activeFeature].content} />
                ) : activeFeature === 'faq' ? (
                  <div className="space-y-4">
                    {analysisResults[activeFeature].content.map((item: any, index: number) => (
                      <div key={index} className="border rounded-lg p-4">
                        <h4 className="font-medium text-gray-800 mb-2">
                          {item.question}
                        </h4>
                        <p className="text-gray-600">{item.answer}</p>
                      </div>
                    ))}
                  </div>
                ) : activeFeature === 'timeline' ? (
                  <div className="space-y-4">
                    {analysisResults[activeFeature].content.map((item: any, index: number) => (
                      <div key={index} className="flex items-start space-x-4">
                        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                          <span className="text-sm font-semibold text-blue-600">
                            {item.year}
                          </span>
                        </div>
                        <div className="flex-1 pt-4">
                          <p className="text-gray-800">{item.event}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="prose max-w-none">
                    <pre className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                      {analysisResults[activeFeature].content}
                    </pre>
                  </div>
                )}
              </div>
            ) : null}
          </CardContent>
        </Card>
      )}
    </div>
  );
};
