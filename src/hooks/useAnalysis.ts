
import { useState } from 'react';
import { AnalysisResults } from '@/types/feature';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { createChain, formatChatHistory } from '@/lib/ai';

export const useAnalysis = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResults>({});
  const [chatHistory, setChatHistory] = useState<{ role: string; content: string }[]>([]);
  const { toast } = useToast();

  const analyzeKnowledgeGraph = async (extractedText: string) => {
    try {
      setIsAnalyzing(true);
      console.log('Calling knowledge graph API...');
      const { data, error } = await supabase.functions.invoke('generate-knowledge-graph', {
        body: { text: extractedText }
      });

      if (error) {
        console.error('Supabase function error:', error);
        throw error;
      }

      console.log('Knowledge graph response:', data);
      
      setAnalysisResults(prev => ({
        ...prev,
        'knowledge-graph': {
          title: "Knowledge Graph",
          content: data.knowledgeGraph
        }
      }));

      toast({
        title: "Knowledge Graph t·∫°o th√†nh c√¥ng!",
        description: "S∆° ƒë·ªì tri th·ª©c ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª´ n·ªôi dung vƒÉn b·∫£n.",
      });
    } catch (error) {
      console.error('Error generating knowledge graph:', error);
      toast({
        title: "L·ªói t·∫°o Knowledge Graph",
        description: "Kh√¥ng th·ªÉ t·∫°o s∆° ƒë·ªì tri th·ª©c. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeSummary = async (text: string) => {
    try {
      setIsAnalyzing(true);
      const chain = createChain(formatChatHistory(chatHistory));
      const prompt = `H√£y t√≥m t·∫Øt to√†n di·ªán n·ªôi dung vƒÉn b·∫£n sau b·∫±ng ti·∫øng Vi·ªát. T·∫≠p trung v√†o c√°c √Ω ch√≠nh v√† ƒëi·ªÉm quan tr·ªçng:

${text}

H√£y ƒë·ªãnh d·∫°ng t√≥m t·∫Øt v·ªõi c√°c bullet points ƒë·ªÉ d·ªÖ ƒë·ªçc h∆°n. Bao g·ªìm:
- Ch·ªß ƒë·ªÅ ch√≠nh
- C√°c √Ω t∆∞·ªüng quan tr·ªçng
- K·∫øt lu·∫≠n ho·∫∑c th√¥ng ƒëi·ªáp ch√≠nh`;

      const summary = await chain.invoke(prompt);

      setAnalysisResults(prev => ({
        ...prev,
        'summary': {
          title: "T√≥m t·∫Øt n·ªôi dung",
          content: summary
        }
      }));

      setChatHistory(prev => [...prev, 
        { role: "human", content: `T√≥m t·∫Øt: ${text}` },
        { role: "assistant", content: summary }
      ]);

      toast({
        title: "T√≥m t·∫Øt th√†nh c√¥ng!",
        description: "N·ªôi dung ƒë√£ ƒë∆∞·ª£c t√≥m t·∫Øt b·∫±ng AI.",
      });
    } catch (error) {
      console.error('Error generating summary:', error);
      toast({
        title: "L·ªói t·∫°o t√≥m t·∫Øt",
        description: "Kh√¥ng th·ªÉ t√≥m t·∫Øt n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeMindMap = async (text: string) => {
    try {
      setIsAnalyzing(true);
      const chain = createChain(formatChatHistory(chatHistory));
      const prompt = `T·∫°o m·ªôt s∆° ƒë·ªì t∆∞ duy ph√¢n c·∫•p b·∫±ng ti·∫øng Vi·ªát t·ª´ vƒÉn b·∫£n sau. S·ª≠ d·ª•ng emoji v√† th·ª•t l·ªÅ ph√π h·ª£p ƒë·ªÉ tr·ª±c quan h√≥a t·ªët h∆°n:

${text}

ƒê·ªãnh d·∫°ng nh∆∞ c·∫•u tr√∫c c√¢y v·ªõi c√°c ch·ªß ƒë·ªÅ ch√≠nh v√† ch·ªß ƒë·ªÅ ph·ª•. V√≠ d·ª•:
üåü Ch·ªß ƒë·ªÅ ch√≠nh
  üìå ƒêi·ªÉm quan tr·ªçng 1
    ‚û§ Chi ti·∫øt 1
    ‚û§ Chi ti·∫øt 2
  üìå ƒêi·ªÉm quan tr·ªçng 2
    ‚û§ Chi ti·∫øt 1
    ‚û§ Chi ti·∫øt 2

H√£y t·∫°o s∆° ƒë·ªì t∆∞ duy chi ti·∫øt v√† c√≥ c·∫•u tr√∫c.`;

      const mindmap = await chain.invoke(prompt);

      setAnalysisResults(prev => ({
        ...prev,
        'mindmap': {
          title: "S∆° ƒë·ªì t∆∞ duy",
          content: mindmap
        }
      }));

      setChatHistory(prev => [...prev, 
        { role: "human", content: `T·∫°o mind map: ${text}` },
        { role: "assistant", content: mindmap }
      ]);

      toast({
        title: "S∆° ƒë·ªì t∆∞ duy t·∫°o th√†nh c√¥ng!",
        description: "S∆° ƒë·ªì t∆∞ duy ƒë√£ ƒë∆∞·ª£c t·∫°o b·∫±ng AI.",
      });
    } catch (error) {
      console.error('Error generating mind map:', error);
      toast({
        title: "L·ªói t·∫°o s∆° ƒë·ªì t∆∞ duy",
        description: "Kh√¥ng th·ªÉ t·∫°o s∆° ƒë·ªì t∆∞ duy. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeFAQ = async (text: string) => {
    try {
      setIsAnalyzing(true);
      const chain = createChain(formatChatHistory(chatHistory));
      const prompt = `T·∫°o danh s√°ch c√¢u h·ªèi th∆∞·ªùng g·∫∑p v√† c√¢u tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát d·ª±a tr√™n vƒÉn b·∫£n sau:

${text}

T·∫°o 5-8 c√¢u h·ªèi ph·ªï bi·∫øn m√† ng∆∞·ªùi ƒë·ªçc c√≥ th·ªÉ c√≥ v·ªÅ n·ªôi dung n√†y. M·ªói c√¢u h·ªèi c·∫ßn c√≥ c√¢u tr·∫£ l·ªùi chi ti·∫øt v√† d·ªÖ hi·ªÉu.

ƒê·ªãnh d·∫°ng ƒë·∫ßu ra nh∆∞ m·ªôt m·∫£ng JSON v·ªõi c√°c object c√≥ thu·ªôc t√≠nh 'question' v√† 'answer':
[
  {
    "question": "C√¢u h·ªèi 1?",
    "answer": "C√¢u tr·∫£ l·ªùi chi ti·∫øt 1"
  },
  {
    "question": "C√¢u h·ªèi 2?", 
    "answer": "C√¢u tr·∫£ l·ªùi chi ti·∫øt 2"
  }
]

Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ text kh√°c.`;

      const faqResponse = await chain.invoke(prompt);

      // Parse the response into the expected format
      let faqContent;
      try {
        faqContent = JSON.parse(faqResponse);
      } catch (parseError) {
        console.error('Failed to parse FAQ JSON, using fallback format');
        // Fallback: create FAQ from text response
        const lines = faqResponse.split('\n').filter(line => line.trim());
        faqContent = [];
        let currentQuestion = '';
        let currentAnswer = '';
        
        for (const line of lines) {
          if (line.includes('?')) {
            if (currentQuestion && currentAnswer) {
              faqContent.push({ question: currentQuestion, answer: currentAnswer });
            }
            currentQuestion = line.trim();
            currentAnswer = '';
          } else if (line.trim() && currentQuestion) {
            currentAnswer += line.trim() + ' ';
          }
        }
        
        if (currentQuestion && currentAnswer) {
          faqContent.push({ question: currentQuestion, answer: currentAnswer.trim() });
        }
      }

      setAnalysisResults(prev => ({
        ...prev,
        'faq': {
          title: "C√¢u h·ªèi th∆∞·ªùng g·∫∑p",
          content: faqContent
        }
      }));

      setChatHistory(prev => [...prev, 
        { role: "human", content: `T·∫°o FAQ: ${text}` },
        { role: "assistant", content: faqResponse }
      ]);

      toast({
        title: "FAQ t·∫°o th√†nh c√¥ng!",
        description: "Danh s√°ch c√¢u h·ªèi th∆∞·ªùng g·∫∑p ƒë√£ ƒë∆∞·ª£c t·∫°o b·∫±ng AI.",
      });
    } catch (error) {
      console.error('Error generating FAQ:', error);
      toast({
        title: "L·ªói t·∫°o FAQ",
        description: "Kh√¥ng th·ªÉ t·∫°o danh s√°ch c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeTimeline = async (text: string) => {
    try {
      setIsAnalyzing(true);
      const chain = createChain(formatChatHistory(chatHistory));
      const prompt = `T·∫°o m·ªôt d√≤ng th·ªùi gian theo th·ª© t·ª± th·ªùi gian b·∫±ng ti·∫øng Vi·ªát t·ª´ vƒÉn b·∫£n sau. Tr√≠ch xu·∫•t v√† s·∫Øp x·∫øp c√°c s·ª± ki·ªán theo ng√†y th√°ng ho·∫∑c th·ªùi k·ª≥:

${text}

N·∫øu vƒÉn b·∫£n kh√¥ng c√≥ th√¥ng tin th·ªùi gian c·ª• th·ªÉ, h√£y t·∫°o timeline logic d·ª±a tr√™n tr√¨nh t·ª± di·ªÖn ra c·ªßa c√°c √Ω t∆∞·ªüng ho·∫∑c ch·ªß ƒë·ªÅ.

ƒê·ªãnh d·∫°ng ƒë·∫ßu ra v·ªõi c√°c m·ªëc th·ªùi gian r√µ r√†ng v√† m√¥ t·∫£ s·ª± ki·ªán. V√≠ d·ª•:
üìÖ 2020: S·ª± ki·ªán quan tr·ªçng ƒë·∫ßu ti√™n
üìÖ 2021: Ph√°t tri·ªÉn ti·∫øp theo  
üìÖ 2022: K·∫øt qu·∫£ cu·ªëi c√πng

Ho·∫∑c n·∫øu kh√¥ng c√≥ th·ªùi gian c·ª• th·ªÉ:
üìã B∆∞·ªõc 1: Gi·ªõi thi·ªáu v·∫•n ƒë·ªÅ
üìã B∆∞·ªõc 2: Ph√¢n t√≠ch nguy√™n nh√¢n
üìã B∆∞·ªõc 3: ƒê∆∞a ra gi·∫£i ph√°p`;

      const timeline = await chain.invoke(prompt);

      setAnalysisResults(prev => ({
        ...prev,
        'timeline': {
          title: "D√≤ng th·ªùi gian",
          content: timeline
        }
      }));

      setChatHistory(prev => [...prev, 
        { role: "human", content: `T·∫°o timeline: ${text}` },
        { role: "assistant", content: timeline }
      ]);

      toast({
        title: "Timeline t·∫°o th√†nh c√¥ng!",
        description: "D√≤ng th·ªùi gian ƒë√£ ƒë∆∞·ª£c t·∫°o b·∫±ng AI.",
      });
    } catch (error) {
      console.error('Error generating timeline:', error);
      toast({
        title: "L·ªói t·∫°o timeline",
        description: "Kh√¥ng th·ªÉ t·∫°o d√≤ng th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeFeature = async (feature: string, text: string) => {
    if (!text.trim()) {
      toast({
        title: "L·ªói",
        description: "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ph√¢n t√≠ch. Vui l√≤ng t·∫£i l√™n file PDF tr∆∞·ªõc.",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzing(true);
    try {
      switch (feature) {
        case 'knowledge-graph':
          await analyzeKnowledgeGraph(text);
          break;
        case 'summary':
          await analyzeSummary(text);
          break;
        case 'mindmap':
          await analyzeMindMap(text);
          break;
        case 'faq':
          await analyzeFAQ(text);
          break;
        case 'timeline':
          await analyzeTimeline(text);
          break;
        default:
          console.error('Unknown feature:', feature);
          toast({
            title: "L·ªói",
            description: "T√≠nh nƒÉng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.",
            variant: "destructive",
          });
      }
    } catch (error) {
      console.error('Error in analyzeFeature:', error);
      toast({
        title: "L·ªói ph√¢n t√≠ch",
        description: "ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch n·ªôi dung. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  return {
    isAnalyzing,
    analysisResults,
    analyzeFeature
  };
};
